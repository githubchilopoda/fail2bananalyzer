/*
 *  Copyright 2015-2016 Fail2BanAnalyzer
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package eu.ubitech.cyberattackanalyzer.parser;

import eu.ubitech.cyberattackanalyzer.model.Attack;
import eu.ubitech.cyberattackanalyzer.model.Attack.DateDescriptor;
import eu.ubitech.cyberattackanalyzer.model.Attack.IPDescriptor;
import eu.ubitech.cyberattackanalyzer.model.ObjectFactory;
import eu.ubitech.cyberattackanalyzer.service.blacklist.ipvoid.BlacklistRetriver;
import eu.ubitech.cyberattackanalyzer.service.location.Location;
import eu.ubitech.cyberattackanalyzer.service.location.freegeoip.LocationRetriever;
import eu.ubitech.cyberattackanalyzer.service.portscanning.Port;
import eu.ubitech.cyberattackanalyzer.service.portscanning.ScanResult;
import eu.ubitech.cyberattackanalyzer.service.portscanning.nmap.NMapScannerExecutor;
import eu.ubitech.cyberattackanalyzer.service.reverseip.VirtualHostname;
import eu.ubitech.cyberattackanalyzer.service.reverseip.hackertarget.VirtuahostNameRetriever;
import eu.ubitech.cyberattackanalyzer.service.whois.HostInfo;
import eu.ubitech.cyberattackanalyzer.service.whois.ripe.RipeRetriver;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Stream;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.PropertyException;
import javax.xml.bind.Unmarshaller;
import org.apache.tools.ant.DirectoryScanner;

/**
 *
 * @author Panagiotis Gouvas (pgouvas@ubitech.eu)
 */
public class AttackLogParser {

    private static final boolean reuseipanalysis = true;
    private static final Logger logger = Logger.getLogger(AttackLogParser.class.getName());
    private static final String savefolder = "output";

    public static void parseFile(String filename) {
        //read file into stream, try-with-resources
        try (Stream<String> stream = Files.lines(Paths.get(filename))) {
            stream.forEach(AttackLogParser::handleAttack);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//EoM parseFile

    /**
     *
     * @param attackdescr is a string that is formatted using the following
     * notation 2015-03-16 07:02:01,684 77.236.97.26 that is generated by the
     * fail2ban log using cat attacks.log | cut -d" " -f1,2,7 > attacks2.log
     */
    public static void handleAttack(String attackdescr) {

        //parse attack descriptor
        String[] parts = attackdescr.split(" ");
        String datestr = parts[0].trim();
        String timestr = parts[1].trim();
        String ipstr = parts[2].trim();

        logger.info("Handling attack: " + attackdescr);

        //checking if this log has been processed in the past
        String fulldate = datestr;
        String[] dateparts = datestr.split("-");
        String[] timeparts = timestr.split(",");
        String year = dateparts[0];
        String month = dateparts[1];
        String day = dateparts[2];
        String time = timeparts[0];
        String filename = generateFilename(year, month, day, time, ipstr);

        File file = new File(savefolder + "/" + filename + ".xml");
        if (file.exists() && !file.isDirectory()) {
            logger.info("Attack already processed: " + attackdescr);
        } else {
            //STEP-0 check if IP has been already analyzed
            DirectoryScanner scanner = new DirectoryScanner();
            scanner.setIncludes(new String[]{"**/*" + ipstr + ".xml"});
            scanner.setBasedir(savefolder);
            scanner.setCaseSensitive(false);
            scanner.scan();
            String[] files = scanner.getIncludedFiles();
            if (files != null && files.length > 0 && reuseipanalysis) {
                logger.info("IP has already bean analyzed: " + ipstr);
                //load existing attack from first file
                Attack existingattack = loadAttackFromFile(new File(savefolder+"/"+files[0]));
                //change only the date
                existingattack.getDateDescriptor().setFulldate(datestr);
                existingattack.getDateDescriptor().setYear(year);
                existingattack.getDateDescriptor().setMonth(month);
                existingattack.getDateDescriptor().setDay(day);
                existingattack.getDateDescriptor().setTime(time);
                //persist the changes
                saveAttackFile(existingattack);
                
            } else {
                //run everything
                //STEP-1 create the attack object and its root elements
                ObjectFactory factory = new ObjectFactory();
                Attack attack = factory.createAttack();
                IPDescriptor ipdescr = factory.createAttackIPDescriptor();
                DateDescriptor datedescriptor = factory.createAttackDateDescriptor();
                Attack.MaliciousActionDescriptor maliciousActionDescriptor = factory.createAttackMaliciousActionDescriptor();

                //STEP-2 create IP descriptor
                ipdescr.setIPAddress(ipstr);

                //---location
                //define retriever
                LocationRetriever locretriever = new LocationRetriever();
                Location location = locretriever.inferLocation(ipstr);
                //define xml element
                IPDescriptor.LocationDescriptor locationDescriptor = factory.createAttackIPDescriptorLocationDescriptor();
                //fill xml element
                locationDescriptor.setCountryName(location.getCountryName());
                locationDescriptor.setCountryCode(location.getCountryCode());
                locationDescriptor.setRegionName(location.getRegionName());
                locationDescriptor.setRegionCode(location.getRegionCode());
                locationDescriptor.setCity(location.getCity());
                locationDescriptor.setZipCode(location.getZipCode());
                locationDescriptor.setTimeZone(location.getTimeZone());
                locationDescriptor.setLatitude(location.getLatitude());
                locationDescriptor.setLongitude(location.getLongitude());
                locationDescriptor.setMetroCode(location.getMetroCode());
                //add it to ipdescr
                ipdescr.setLocationDescriptor(locationDescriptor);

                //--reverse ip
                //define retriver
                VirtuahostNameRetriever vhostretriver = new VirtuahostNameRetriever();
                ArrayList<VirtualHostname> vhosts = vhostretriver.retriverVirtualHosts(ipstr);
                //define xml element
                IPDescriptor.ReverseIPDescriptor reverseIPDescriptor = factory.createAttackIPDescriptorReverseIPDescriptor();
                //fill xml element
                reverseIPDescriptor.setAmountOfVirtualHosts(vhosts.size());
                for (VirtualHostname vhost : vhosts) {
                    IPDescriptor.ReverseIPDescriptor.VirtualHost xmlVirtualHost = factory.createAttackIPDescriptorReverseIPDescriptorVirtualHost();
                    xmlVirtualHost.setVirtualHostname(vhost.getUrl());
                    reverseIPDescriptor.getVirtualHost().add(xmlVirtualHost);
                }//for        
                //add it to ipdescr
                ipdescr.setReverseIPDescriptor(reverseIPDescriptor);

                //--whois data
                //define retriver
                RipeRetriver whoisretriver = new RipeRetriver();
                HostInfo hostInfo = whoisretriver.getHostInfo(ipstr);
                //define xml element
                IPDescriptor.AdversaryHostDescriptor adversaryHostDescriptor = factory.createAttackIPDescriptorAdversaryHostDescriptor();
                //fill xml element
                adversaryHostDescriptor.setNetworkRange(hostInfo.getInetnum());
                adversaryHostDescriptor.setNetworkName(hostInfo.getNetname());
                adversaryHostDescriptor.setNetworkDescription(hostInfo.getOrgname());
                adversaryHostDescriptor.setNetworkSize(hostInfo.getNetsize());
                //add it to ipdescr
                ipdescr.setAdversaryHostDescriptor(adversaryHostDescriptor);

                //--blacklisting               
                //define retriver
                BlacklistRetriver blr = new BlacklistRetriver();
                int blackliststatus = blr.getBlacklistStatus(ipstr);
                //define xml element
                IPDescriptor.BlacklistingDescriptor blacklistingDescriptor = factory.createAttackIPDescriptorBlacklistingDescriptor();
                //fill xml element
                blacklistingDescriptor.setVisitorClassification("" + blackliststatus);
                //add it to ipdescr
                ipdescr.setBlacklistingDescriptor(blacklistingDescriptor);

                //--port scanning
                //define retriver
                NMapScannerExecutor nMapScannerExecutor = new NMapScannerExecutor();
                ScanResult scanres = nMapScannerExecutor.scanTarget(ipstr);                
                //define xml element
                IPDescriptor.AdversarySystemDescriptor systemDescriptor = factory.createAttackIPDescriptorAdversarySystemDescriptor();
                //fill xml element
                IPDescriptor.AdversarySystemDescriptor.PortsDescriptor portsDescriptor = factory.createAttackIPDescriptorAdversarySystemDescriptorPortsDescriptor();
                portsDescriptor.setAmount(""+scanres.getAmount());
                if (scanres.getPorts()!=null)
                for (Port port : scanres.getPorts()) {
                    IPDescriptor.AdversarySystemDescriptor.PortsDescriptor.PortDescriptor xmlport = factory.createAttackIPDescriptorAdversarySystemDescriptorPortsDescriptorPortDescriptor();
                    xmlport.setPort(port.getPortnumber());
                    xmlport.setProgramName(port.getService());
                    portsDescriptor.getPortDescriptor().add(xmlport);
                }                
                systemDescriptor.setPortsDescriptor(portsDescriptor);                
                systemDescriptor.setOSDescriptor(scanres.getOs());
                //add it to ipdescr
                ipdescr.setAdversarySystemDescriptor(systemDescriptor);
                
                //STEP-3 handle data 
                datedescriptor.setFulldate(datestr);
                datedescriptor.setYear(year);
                datedescriptor.setMonth(month);
                datedescriptor.setDay(day);
                datedescriptor.setTime(time);

                //STEP-4 handle malicious action
                
                //STEP-5 fill object
                attack.setIPDescriptor(ipdescr);
                attack.setDateDescriptor(datedescriptor);
                //attack.setMaliciousActionDescriptor(maliciousActionDescriptor);

                //STEP-6 savefile
                saveAttackFile(attack);
            }// IP not analyzed
        }//Attack not existing  

    }//EoM

    public static void saveAttackFile(Attack attack) {
        try {
            String filename = generateFilename(attack);
            JAXBContext msjaxbContext = JAXBContext.newInstance(Attack.class);
            Marshaller msjaxbMarshaller = msjaxbContext.createMarshaller();
            msjaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);

            File file = new File(savefolder + "/" + filename + ".xml");
            FileOutputStream fop = new FileOutputStream(file);
            msjaxbMarshaller.marshal(attack, fop);

        } catch (PropertyException ex) {
            Logger.getLogger(AttackLogParser.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JAXBException ex) {
            Logger.getLogger(AttackLogParser.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(AttackLogParser.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//EoM saveAttackFile

    public static Attack loadAttackFromFile(File file) {
        Attack attack = null;
        try {
            JAXBContext jaxbContext = JAXBContext.newInstance(Attack.class);
            Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
            attack = (Attack) jaxbUnmarshaller.unmarshal(file);
        } catch (JAXBException ex) {
            Logger.getLogger(AttackLogParser.class.getName()).log(Level.SEVERE, null, ex);
        }
        return attack;
    }//EoM

    public static String generateFilename(Attack attack) {
        return attack.getDateDescriptor().getYear() + "_" + attack.getDateDescriptor().getMonth() + "_" + attack.getDateDescriptor().getDay() + "_" + attack.getDateDescriptor().getTime() + "_" + attack.getIPDescriptor().getIPAddress();
    }

    public static String generateFilename(String year, String month, String day, String time, String ipaddr) {
        return year + "_" + month + "_" + day + "_" + time + "_" + ipaddr;
    }

}//EoC
